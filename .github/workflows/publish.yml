name: Bump & Publish (manual)

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Version bump type (major | minor | patch)"
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          scope: "@impulselab"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Verify npm auth
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "${NODE_AUTH_TOKEN}" ]; then
            echo "NPM token is missing. Set repository secret NPM_TOKEN with publish permissions." >&2
            exit 1
          fi
          npm whoami --registry=https://registry.npmjs.org || { echo "npm auth failed. Check token scope." >&2; exit 1; }

      - name: Install
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump version in lib and service
        id: bump
        env:
          RELEASE: ${{ github.event.inputs.release }}
        run: |
          bump() {
            local file=$1
            local release=$2
            current=$(jq -r '.version' "$file")
            IFS='.' read -r major minor patch <<< "$current"
            case "$release" in
              major)
                major=$((major+1)); minor=0; patch=0;;
              minor)
                minor=$((minor+1)); patch=0;;
              patch)
                patch=$((patch+1));;
              *) echo "Invalid release type: $release"; exit 1;;
            esac
            new="${major}.${minor}.${patch}"
            tmp=$(mktemp)
            jq --arg v "$new" '.version = $v' "$file" > "$tmp" && mv "$tmp" "$file"
            echo "$new"
          }
          NEW_LIB_VER=$(bump lib/package.json "$RELEASE")
          NEW_SVC_VER=$(bump service/package.json "$RELEASE")
          echo "lib_version=$NEW_LIB_VER" >> $GITHUB_OUTPUT
          echo "service_version=$NEW_SVC_VER" >> $GITHUB_OUTPUT

      - name: Commit version bumps
        run: |
          git add lib/package.json service/package.json
          git commit -m "chore(release): bump versions (lib: ${{ steps.bump.outputs.lib_version }}, service: ${{ steps.bump.outputs.service_version }})"
          git push

      - name: Build workspace
        run: pnpm -r --filter="!demo" build

      - name: Publish @impulselab/realtime (lib)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd lib
          pnpm publish --access public --no-git-checks

      - name: Publish @impulselab/realtime-service (service)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd service
          pnpm publish --access public --no-git-checks

      - name: Create and push Git tag
        run: |
          git tag v${{ steps.bump.outputs.service_version }}
          git push origin v${{ steps.bump.outputs.service_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.service_version }}
          name: Release v${{ steps.bump.outputs.service_version }}
          body: |
            Release v${{ steps.bump.outputs.service_version }}

            **Package Versions:**
            - @impulselab/realtime (lib): v${{ steps.bump.outputs.lib_version }}
            - @impulselab/realtime-service (service): v${{ steps.bump.outputs.service_version }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: service/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/realtime-service:latest
            ghcr.io/${{ github.repository_owner }}/realtime-service:${{ steps.bump.outputs.service_version }}
